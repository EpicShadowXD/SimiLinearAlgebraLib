        -:    0:Source:/home/simi/Dev/C++/SimiLinearAlgebraLib/Matrix.cpp
        -:    0:Graph:/home/simi/Dev/C++/SimiLinearAlgebraLib/cmake-build-debug-coverage/CMakeFiles/LinearAlgebraLib.dir/main.cpp.gcno
        -:    0:Data:/home/simi/Dev/C++/SimiLinearAlgebraLib/cmake-build-debug-coverage/CMakeFiles/LinearAlgebraLib.dir/main.cpp.gcda
        -:    0:Runs:1
        -:    1:#include "Matrix.h"
        -:    2:
        -:    3:#include "LinearAlgebra.cpp"
        -:    4:#include "Iterator.cpp"
        -:    5:
        -:    6:namespace SimiLAL {
        -:    7:    // <Debug>
        -:    8:    template <typename T>
function _ZN7SimiLAL6MatrixIdE5printEv called 1 returned 100% blocks executed 100%
        1:    9:    void SimiLAL::Matrix<T>::print() {
        4:   10:        for (size_t i = 0; i < rowCount; i++) {
        1:   10-block  0
        4:   10-block  1
branch  0 taken 3
branch  1 taken 1 (fallthrough)
       12:   11:            for (size_t j = 0; j < colCount; j++)
        3:   11-block  0
       12:   11-block  1
branch  0 taken 9
branch  1 taken 3 (fallthrough)
        9:   12:                std::cout << data[i][j] << ' ';
        9:   12-block  0
call    0 returned 9
call    1 returned 9
call    2 returned 9
call    3 returned 9
        3:   13:            std::cout << std::endl;
        3:   13-block  0
call    0 returned 3
        -:   14:        }
        1:   15:    }
        -:   16:    // </Debug>
        -:   17:
        -:   18:    // <Helper>
        -:   19:    template <typename T>
        -:   20:    void SimiLAL::Matrix<T>::parseAllData(const Matrix<T> &other, T (*func)(const T &, const T &)) {
        -:   21:        for (size_t i = 0; i < rowCount; i++)
        -:   22:            for (size_t j = 0; j < colCount; j++)
        -:   23:                data[i][j] = func(data[i][j], other.data[i][j]);
        -:   24:    }
        -:   25:
        -:   26:    template <typename T>
        -:   27:    void SimiLAL::Matrix<T>::insert(T element) {
        -:   28:        data[currentInsertIPos][currentInsertJPos] = element;
        -:   29:
        -:   30:        currentInsertJPos++;
        -:   31:
        -:   32:        // clamp
        -:   33:        if (currentInsertJPos >= colCount)
        -:   34:        {
        -:   35:            currentInsertJPos = 0;
        -:   36:            currentInsertIPos++;
        -:   37:        }
        -:   38:        if (currentInsertIPos >= rowCount)
        -:   39:            currentInsertIPos = 0;
        -:   40:    }
        -:   41:
        -:   42:    // </Helper>
        -:   43:}
